#ifndef BITCOIN_CHAINPARAMSCONSTANTS_H
#define BITCOIN_CHAINPARAMSCONSTANTS_H
/**
 * Chain params constants for each tracked chain.
 * @generated by contrib/devtools/chainparams/generate_chainparams_constants.py
 */

#include <primitives/blockhash.h>
#include <uint256.h>

namespace ChainParamsConstants {
    const BlockHash MAINNET_DEFAULT_ASSUME_VALID = BlockHash::fromHex("00000000671e78e128aa4b3943689e2675d80410c280a81d9e102036716f1a0e");
    const uint256 MAINNET_MINIMUM_CHAIN_WORK = uint256S("0000000000000000000000000000000000000000000000000000000000010001");

    const BlockHash TESTNET_DEFAULT_ASSUME_VALID = BlockHash::fromHex("00000000671e78e128aa4b3943689e2675d80410c280a81d9e102036716f1a0e");
    const uint256 TESTNET_MINIMUM_CHAIN_WORK = uint256S("0000000000000000000000000000000000000000000000000000000000010001");

    const BlockHash TESTNET4_DEFAULT_ASSUME_VALID = BlockHash::fromHex("00000000671e78e128aa4b3943689e2675d80410c280a81d9e102036716f1a0e");
    const uint256 TESTNET4_MINIMUM_CHAIN_WORK = uint256S("0000000000000000000000000000000000000000000000000000000000010001");

    // Scalenet re-organizes above height 10,000 - use block 9,999 hash here.
    const BlockHash SCALENET_DEFAULT_ASSUME_VALID = BlockHash::fromHex("00000000671e78e128aa4b3943689e2675d80410c280a81d9e102036716f1a0e");
    const uint256 SCALENET_MINIMUM_CHAIN_WORK = uint256S("0000000000000000000000000000000000000000000000000000000000010001");
} // namespace ChainParamsConstants

#endif // BITCOIN_CHAINPARAMSCONSTANTS_H
